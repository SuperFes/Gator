// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: feeds.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createFeed = `-- name: CreateFeed :one
INSERT INTO feeds (id, created_at, updated_at, name, url, user_id)
VALUES ($1,
        NOW(),
        NOW(),
        $2,
        $3,
        $4)
RETURNING id, created_at, updated_at, name, url, user_id, last_fetched_at
`

type CreateFeedParams struct {
	ID     uuid.UUID
	Name   string
	Url    string
	UserID uuid.UUID
}

func (q *Queries) CreateFeed(ctx context.Context, arg CreateFeedParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, createFeed,
		arg.ID,
		arg.Name,
		arg.Url,
		arg.UserID,
	)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.UserID,
		&i.LastFetchedAt,
	)
	return i, err
}

const createFeedFollow = `-- name: CreateFeedFollow :one
INSERT INTO feed_follows (id, created_at, updated_at, user_id, feed_id)
VALUES ($1,
        NOW(),
        NOW(),
        $2,
        $3)
RETURNING id, created_at, updated_at, user_id, feed_id
`

type CreateFeedFollowParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
	FeedID uuid.UUID
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (FeedFollow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow, arg.ID, arg.UserID, arg.FeedID)
	var i FeedFollow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FeedID,
	)
	return i, err
}

const deleteFeedFollow = `-- name: DeleteFeedFollow :exec
DELETE
FROM feed_follows
WHERE feed_id = $1
  AND user_id = $2
`

type DeleteFeedFollowParams struct {
	FeedID uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) DeleteFeedFollow(ctx context.Context, arg DeleteFeedFollowParams) error {
	_, err := q.db.ExecContext(ctx, deleteFeedFollow, arg.FeedID, arg.UserID)
	return err
}

const deleteFeeds = `-- name: DeleteFeeds :exec
DELETE
FROM feeds
`

func (q *Queries) DeleteFeeds(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteFeeds)
	return err
}

const getFeed = `-- name: GetFeed :one
SELECT id, created_at, updated_at, name, url, user_id, last_fetched_at
FROM feeds
WHERE feeds.url = $1
`

func (q *Queries) GetFeed(ctx context.Context, url string) (Feed, error) {
	row := q.db.QueryRowContext(ctx, getFeed, url)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.UserID,
		&i.LastFetchedAt,
	)
	return i, err
}

const getFeedFollows = `-- name: GetFeedFollows :many
SELECT users.name as username, feeds.name as feed_name, feeds.url, feed_follows.feed_id
FROM feed_follows
         INNER JOIN users ON feed_follows.user_id = users.id
         INNER JOIN feeds ON feed_follows.feed_id = feeds.id
WHERE users.name = $1
`

type GetFeedFollowsRow struct {
	Username string
	FeedName string
	Url      string
	FeedID   uuid.UUID
}

func (q *Queries) GetFeedFollows(ctx context.Context, name string) ([]GetFeedFollowsRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedFollows, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedFollowsRow
	for rows.Next() {
		var i GetFeedFollowsRow
		if err := rows.Scan(
			&i.Username,
			&i.FeedName,
			&i.Url,
			&i.FeedID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFeeds = `-- name: GetFeeds :many
SELECT feeds.name, feeds.url, users.name as username
FROM feeds
         INNER JOIN users ON feeds.user_id = users.id
`

type GetFeedsRow struct {
	Name     string
	Url      string
	Username string
}

func (q *Queries) GetFeeds(ctx context.Context) ([]GetFeedsRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeeds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedsRow
	for rows.Next() {
		var i GetFeedsRow
		if err := rows.Scan(&i.Name, &i.Url, &i.Username); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNextFeedToFetch = `-- name: GetNextFeedToFetch :many
SELECT feeds.id, feeds.url
FROM feeds
         INNER JOIN feed_follows ON feeds.id = feed_follows.feed_id
WHERE feeds.last_fetched_at IS NULL
   OR feeds.last_fetched_at < NOW() - INTERVAL $1 AND feed_follows.user_id = $2
ORDER BY feeds.last_fetched_at ASC NULLS FIRST
`

type GetNextFeedToFetchParams struct {
	Column1 int64
	UserID  uuid.UUID
}

type GetNextFeedToFetchRow struct {
	ID  uuid.UUID
	Url string
}

func (q *Queries) GetNextFeedToFetch(ctx context.Context, arg GetNextFeedToFetchParams) ([]GetNextFeedToFetchRow, error) {
	rows, err := q.db.QueryContext(ctx, getNextFeedToFetch, arg.Column1, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetNextFeedToFetchRow
	for rows.Next() {
		var i GetNextFeedToFetchRow
		if err := rows.Scan(&i.ID, &i.Url); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFeedLastFetchedAt = `-- name: UpdateFeedLastFetchedAt :exec
UPDATE feeds
SET last_fetched_at = NOW()
WHERE id = $1
`

func (q *Queries) UpdateFeedLastFetchedAt(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, updateFeedLastFetchedAt, id)
	return err
}
