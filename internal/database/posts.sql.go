// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: posts.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const addPost = `-- name: AddPost :one
INSERT INTO posts (id, created_at, updated_at, title, description, url, feed_id, user_id)
VALUES (
       $1,
       $2,
       $3,
       $4,
       $5,
       $6,
       $7,
       $8
)
RETURNING id, created_at, updated_at, read_at, user_id, feed_id, title, description, url, published_at
`

type AddPostParams struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Title       sql.NullString
	Description sql.NullString
	Url         string
	FeedID      uuid.UUID
	UserID      uuid.UUID
}

func (q *Queries) AddPost(ctx context.Context, arg AddPostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, addPost,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Title,
		arg.Description,
		arg.Url,
		arg.FeedID,
		arg.UserID,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ReadAt,
		&i.UserID,
		&i.FeedID,
		&i.Title,
		&i.Description,
		&i.Url,
		&i.PublishedAt,
	)
	return i, err
}

const getPost = `-- name: GetPost :one
SELECT id, created_at, updated_at, read_at, user_id, feed_id, title, description, url, published_at FROM posts WHERE id = $1
`

func (q *Queries) GetPost(ctx context.Context, id uuid.UUID) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPost, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ReadAt,
		&i.UserID,
		&i.FeedID,
		&i.Title,
		&i.Description,
		&i.Url,
		&i.PublishedAt,
	)
	return i, err
}

const getPosts = `-- name: GetPosts :many
SELECT id, created_at, updated_at, read_at, user_id, feed_id, title, description, url, published_at FROM posts WHERE user_id = $1 ORDER BY created_at DESC LIMIT $2 OFFSET $3
`

type GetPostsParams struct {
	UserID uuid.UUID
	Limit  int32
	Offset int32
}

func (q *Queries) GetPosts(ctx context.Context, arg GetPostsParams) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getPosts, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ReadAt,
			&i.UserID,
			&i.FeedID,
			&i.Title,
			&i.Description,
			&i.Url,
			&i.PublishedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readPost = `-- name: ReadPost :exec
UPDATE posts SET read_at = NOW() WHERE id = $1
`

func (q *Queries) ReadPost(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, readPost, id)
	return err
}
